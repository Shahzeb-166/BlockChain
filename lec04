// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol";
import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";


contract MyToken is ERC20, ERC20Permit {
    constructor(address recipient) ERC20("Shahzeb", "SHZ") ERC20Permit("MyToken") {
     _mint(recipient, 100000 * 10 ** decimals());
    }
}

contract staking {
    MyToken public token;
    mapping(address => uint256) public stakedAmount;

    function stake(uint256 amount) public {
        
        token.transfer(address(this), amount); 
        stakedAmount[msg.sender] += amount;
    }
    function withdraw(uint256 amount) public {
        require(amount > 0, "Amount must be greater than 0");
        require(stakedAmount[msg.sender] >= amount, "Insufficient staked amount");

        stakedAmount[msg.sender] -= amount;
        token.transfer(msg.sender, amount);
    }

    
    function stakedBalance(address account) external view returns (uint256) {
        return stakedAmount[account];
    }

}
